<script type="application/javascript">  
    /* 
     * This code searches for all the <script type="application/processing" target="canvasid"> 
     * in your page and loads each script in the target canvas with the proper id. 
     * It is useful to smooth the process of adding Processing code in your page and starting 
     * the Processing.js engine. 
     */  
      
    if (window.addEventListener) {  
      window.addEventListener("load", function() {  
        var scripts = document.getElementsByTagName("script");  
        var canvasArray = Array.prototype.slice.call(document.getElementsByTagName("canvas"));  
        var canvas;  
        for (var i = 0, j = 0; i < scripts.length; i++) {  
          if (scripts[i].type == "application/processing") {  
            var src = scripts[i].getAttribute("target");  
            if (src && src.indexOf("#") > -1) {  
              canvas = document.getElementById(src.substr(src.indexOf("#") + 1));  
              if (canvas) {  
                new Processing(canvas, scripts[i].text);  
                for (var k = 0; k< canvasArray.length; k++)  
                {  
                  if (canvasArray[k] === canvas) {  
                    // remove the canvas from the array so we dont override it in the else  
                    canvasArray.splice(k,1);  
                  }  
                }  
              }  
            } else {      
              if (canvasArray.length >= j) {  
                new Processing(canvasArray[j], scripts[i].text);            
              }  
              j++;  
            }         
          }  
        }  
      }, false);  
    }  
</script>  
    
<script type="application/processing" target="processing-canvas">  
ParticleSystem ps;
color g = color(30, 10, 30);
int screen_width = 1260;
int c_height = 200;

void setup(){
  size(screen_width, c_height);
  colorMode(RGB, 255, 255, 255, 100);
  ps = new ParticleSystem(100);
  smooth();
}

void draw(){
  background(255);
  ps.run();
  ps.addParticle();
}

class ParticleSystem{
  ArrayList particles;
  
  ParticleSystem(int num){
    particles = new ArrayList();
    for(int i = 0; i < num; i++){
      particles.add(new Particle());
    }
  }
  
  void run(){
    for(int i = particles.size()-1; i >= 0; i--){
      Particle p = (Particle) particles.get(i);
      p.run();
      if(p.dead()){
        particles.remove(i);
      }
    }
  }
  
  void addParticle(){
    particles.add(new Particle());
  }
}

class Particle{
  PVector loc;
  PVector vel;
  float timer;
  float size;
  color col;
  
  Particle(){
    timer = 100;
    loc = new PVector(random(screen_width-60), c_height);
    vel = new PVector(0, -random(1));
    col = color(random(50), random(50,255), random(50));
    size = random(60);
  }
  
  void run(){
    update();
    render();
  }
  void update(){
    loc.add(vel);
    timer -= 0.5;
  }
  void render(){
    ellipseMode(CENTER);
    noStroke();
    fill(col, timer);
    ellipse(loc.x, loc.y, (int)((size-10) * timer/100 + 10), (int)((size-10) * timer/100 + 10));
  }
  boolean dead(){
    if(timer <= 0.0) return true;
    else return false;
  }
}
</script>  